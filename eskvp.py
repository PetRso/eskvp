import streamlit as st
import pandas as pd
from io import BytesIO
import re

st.set_page_config(page_title="Rozdelenie obsahov√Ωch ≈°tandardov do roƒçn√≠kov")

def load_css(file_name = "style.css"):
    with open(file_name) as f:
        css = f'<style>{f.read()}</style>'
    return css

css = load_css()
st.markdown(css, unsafe_allow_html=True)

@st.cache_data()
def load_standardy():
    """
    sheets_url = st.secrets["public_gsheets_url"]
    """
    sheets_url = st.secrets["public_gsheets_url"]  # existuj√∫ dva tvary
    csv_url = sheets_url.replace("edit?usp=sharing", f"gviz/tq?tqx=out:csv&sheet=vzdelavacie_standardy")
    df = pd.read_csv(csv_url).set_index('id')
    df["definicia"] = df["para_html"]
    df = df.fillna('')
    return df

def clean_html(raw_html):
    """Odstr√°ni HTML tagy z vety"""
    cleantext = re.sub('<.*?>', '', raw_html)
    return cleantext

@st.cache_data()
def clean_standardy(definicie):
    """
    definicie = df.para_html
    """
    # odstrani horne indexy
    definicie = definicie.str.replace('<sup>.*?</sup>', '', regex=True)
    definicie = definicie.str.replace('<br>', ' ', regex=False)
    definicie = definicie.str.replace(' ,', '', regex=False)
    definicie = definicie.str.replace(' .', '.', regex=False)

    # odstrani html tagy
    definicie = definicie.str.replace('\*\*', '', regex=True)
    definicie = [clean_html(x) for x in definicie]

    # odstrani znaky na zaƒçiatku vety
    definicie = [x[2:] if x[0] == '-' else x for x in definicie]
    definicie = [x[3:] if x[0] == '1' else x for x in definicie]
    definicie = [x.strip() for x in definicie]

    # V≈°etky veƒæk√© p√≠smen√° a ukonƒçen√© bodkou, aby v≈°etky ≈°tandardy boli form√°tovan√© rovnako.
    definicie = [x[0].capitalize() + x[1:] for x in definicie]
    definicie = [x + '.' if x[-1] != '.' else x for x in definicie]
    return definicie


# defin√≠cia predmetov
vos = {'Jazyk a komunik√°cia': ['Slovensk√Ω jazyk a literat√∫ra', 'Jazyky n√°rodnostn√Ωch men≈°√≠n',
                               'Slovensk√Ω jazyk ako druh√Ω jazyk', 'Cudz√≠ jazyk'],
       'Matematika a informatika': ['Matematika', 'Informatika'],
       'ƒålovek a pr√≠roda': [],
       'ƒålovek a spoloƒçnos≈•': ['ƒålovek a spoloƒçnos≈•', 'N√°bo≈æenstvo'],
       'ƒålovek a svet pr√°ce': [],
       'Umenie a kult√∫ra': ['Hudobn√° v√Ωchova', 'V√Ωtvarn√° v√Ωchova'],
       'Zdravie a pohyb': []}

jazyky_narodnostne = ['Maƒèarsk√Ω jazyk a literat√∫ra', 'Nemeck√Ω jazyk a literat√∫ra', 'R√≥msky jazyk a literat√∫ra',
                      'Rus√≠nsky jazyk a literat√∫ra', 'Rusk√Ω jazyk a literat√∫ra', 'Ukrajinsk√Ω jazyk a literat√∫ra']

# defin√≠cia skratiek pre id
predmety_kody = {'Slovensk√Ω jazyk a literat√∫ra': 'sk',
                 'Maƒèarsk√Ω jazyk a literat√∫ra': 'hu',
                 'Nemeck√Ω jazyk a literat√∫ra': 'de',
                 'R√≥msky jazyk a literat√∫ra': 'ry',
                 'Rus√≠nsky jazyk a literat√∫ra': 'ri',
                 'Rusk√Ω jazyk a literat√∫ra': 'ru',
                 'Ukrajinsk√Ω jazyk a literat√∫ra': 'uk',
                 'Slovensk√Ω jazyk a slovensk√° literat√∫ra': 'sj',
                 'Slovensk√Ω jazyk ako druh√Ω jazyk': 'dj',
                 'Cudz√≠ jazyk': 'cj',
                 'Matematika': 'mt',
                 'Informatika': 'if',
                 'ƒålovek a spoloƒçnos≈•': 'cs',
                 'ƒålovek a pr√≠roda': 'cp',
                 'ƒålovek a svet pr√°ce': 'sp',
                 'Hudobn√° v√Ωchova': 'hv',
                 'V√Ωtvarn√° v√Ωchova': 'vv',
                 'Zdravie a pohyb': 'zp',
                 'N√°bo≈æenstvo Cirkvi bratskej': 'br',
                 'N√°bo≈æenstvo Gr√©ckokatol√≠ckej cirkvi': 'gr',
                 'N√°bo≈æenstvo Pravosl√°vnej cirkvi': 'pr',
                 'N√°bo≈æenstvo Reformovanej kres≈•anskej cirkvi': 'rf',
                 'N√°bo≈æenstvo R√≠mskokatol√≠ckej cirkvi': 'rk',
                 'N√°bo≈æenstvo Evanjelickej cirkvi a. v.': 'ev'}


jazyky = ['Anglick√Ω jazyk', 'Franc√∫zsky jazyk', 'Nemeck√Ω jazyk', 'Rusk√Ω jazyk', '≈†panielsky jazyk', 'Taliansky jazyk']

slj_ako_druhy_jazyk = ['Slovensk√Ω jazyk ako druh√Ω jazyk', 'Slovensk√Ω jazyk a slovensk√° literat√∫ra']

nabozenstva = ['N√°bo≈æenstvo Cirkvi bratskej', 'N√°bo≈æenstvo Gr√©ckokatol√≠ckej cirkvi', 'N√°bo≈æenstvo Pravosl√°vnej cirkvi',
               'N√°bo≈æenstvo Reformovanej kres≈•anskej cirkvi', 'N√°bo≈æenstvo R√≠mskokatol√≠ckej cirkvi',
               'N√°bo≈æenstvo Evanjelickej cirkvi a. v.']


df = load_standardy()
df["definicia"] = clean_standardy(df["definicia"])


# vyber predmet a cyklus
# predmety = df.predmet.unique()
cykly = [1, 2, 3]
tabs_cykly = {'1. cyklus (r. 1-3)': 1, '2. cyklus (r. 4-5)': 2, '3. cyklus (r. 6-9)': 3}
tabs_cykly_cj = {'1. cyklus (r.1-3)': 1, '2. cyklus (r.4-5)': 2, '3. cyklus - prv√Ω jazyk (r.6-9)': 3, '3. cyklus - druh√Ω jazyk (r.6-9)': 4}

st.sidebar.title('N√°stroj na tvorbu uƒçebn√Ωch osnov')
st.sidebar.info('1. Vyber vzdel√°vaciu oblas≈• a cyklusÔ∏è üë©üèΩ‚Äçüè´ \n 1. Priraƒè obsahov√© ≈°tandardy do roƒçn√≠kov ‚òëÔ∏è \n 2. Stiahni uƒçebn√© osnovy v tabuƒækovom form√°te üì• üóé')

vo = st.sidebar.selectbox('Vzdel√°vacia oblas≈•', vos)
if vos[vo]:
    predmet = st.sidebar.selectbox('Predmet', vos[vo])  # label_visibility='collapsed'
else:
    predmet = vo

if predmet == 'Slovensk√Ω jazyk ako druh√Ω jazyk':
    predmet = st.sidebar.selectbox('Slovensk√Ω jazyk ako druh√Ω jazyk', slj_ako_druhy_jazyk,
                                   label_visibility='collapsed')
    if predmet == 'Slovensk√Ω jazyk ako druh√Ω jazyk':
        tabs_cykly = {'Komunikaƒçn√° √∫rove≈à 1 (z√°kladn√°)': 1, 'Komunikaƒçn√° √∫rove≈à 2 (roz≈°iruj√∫ca)': 2}
    elif predmet == 'Cudz√≠ jazyk':
        tabs_cykly = {'1. cyklus (r.1-3)': 1, '2. cyklus (r.4-5)': 2, '3. cyklus - prv√Ω jazyk (r.6-9)': 3,
                      '3. cyklus - druh√Ω jazyk (r.6-9)': 4}
        jazyk = st.sidebar.selectbox('Jazyk', jazyky)
    elif predmet == 'N√°bo≈æenstvo':
        predmet = st.sidebar.selectbox('N√°bo≈æenstvo', nabozenstva, label_visibility='collapsed')
    elif predmet == 'Jazyky n√°rodnostn√Ωch men≈°√≠n':
        predmet = st.sidebar.selectbox('Jazyky n√°rodnostn√Ωch men≈°√≠n', jazyky_narodnostne, label_visibility='collapsed')


cyklus = tabs_cykly[st.sidebar.selectbox('Cyklus', tabs_cykly.keys())]

# v√Ωber d√°t
dfx = df[df.index.str.contains(f'{predmety_kody[predmet]}{cyklus}-o-')]
dfx = dfx[dfx.typ_standardu != '√övod']
dfx = dfx[dfx.tema != '√övod']

if predmet == 'Cudz√≠ jazyk':
    jzk = jazyky.copy()  # aby som nemazal selectbox
    jzk.remove(jazyk)
    dfx = dfx[~dfx.typ_standardu.isin(jzk)]  # iba pre vybran√Ω jazyk, alebo pre v≈°etky

# vybrane priradenie do rocnikov
if cyklus == 1:
    cols_rocniky = ['1.', '2.', '3.']
elif cyklus == 2:
    cols_rocniky = ['4.', '5.']
elif cyklus == 3:
    cols_rocniky = ['6.', '7.', '8.', '9.']

dfx.loc[:, cols_rocniky] = True
cols_to_st =  ['definicia'] + cols_rocniky
cols_to_xlsx = ['typ', 'komponent', 'tema', 'typ_standardu', "definicia"]


i_key = 0
for komponent in dfx.komponent.unique():
    st.markdown(f"### {komponent}")
    i_komponent = (dfx.komponent == komponent)
    for tema in dfx.loc[i_komponent,"tema"].unique():
        if tema != '':
            st.markdown(f"#### {tema}")
        i_tema = i_komponent & (dfx.tema == tema)
        for typ_standardu in dfx.loc[i_tema, "typ_standardu"].unique():
            if typ_standardu != '':
                st.markdown(f"##### {typ_standardu}")
            i = i_tema & (dfx.typ_standardu == typ_standardu)
            dfx.loc[i, cols_to_st] = st.data_editor(dfx.loc[i, cols_to_st],
                                            width=1000,
                                            disabled = ['definicia'],
                                            hide_index=True,
                                            key=f"data_editor_{i_key}")
            i_key += 1


def to_excel(df, cols_rocniky):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    for rocnik in cols_rocniky:
        sheet_name = f'{rocnik} roƒçn√≠k'
        df.loc[df[rocnik] == True, cols_to_xlsx].to_excel(writer, index=False, sheet_name=sheet_name)
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]
        # format1 = workbook.add_format({'text_wrap': True})
        worksheet.set_column('A:D', 20)
        worksheet.set_column('E:E', 60)
    writer.close()
    processed_data = output.getvalue()
    return processed_data


df_xlsx = to_excel(dfx, cols_rocniky)
st.download_button(label='üì• Download',
                   data=df_xlsx ,
                   file_name= 'rozdelene_standardy.xlsx')
